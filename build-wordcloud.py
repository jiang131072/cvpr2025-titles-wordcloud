"""Generated by Gemini 2.5 Pro Exp (add some stopwords)"""

import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS
import re  # 用于更精细的文本清理 (可选)

# --- 配置 ---
# 1. 指定包含标题的文本文件的路径
txt_file_path = "cvpr2025.txt"  # <--- 修改为你的文件名

# 2. 输出词云图片的文件名 (如果想保存的话)
output_image_file = "cvpr2025_wordcloud.png"

# 3. (可选) 添加自定义的停用词 (stopwords)
#    除了默认的停用词 (如 'a', 'the', 'is')，还可以添加领域相关的常见但信息量不大的词
custom_stopwords = set(STOPWORDS)  # 使用 WordCloud 默认的停用词集合
custom_stopwords.update(
    [
        "learning",
        "network",
        "networks",
        "neural",
        "deep",  # 这些词可能太常见了，根据需要决定是否移除
        "image",
        "images",
        "video",
        "videos",
        "detection",
        "recognition",
        "segmentation",  # 基础 CV 任务词
        "method",
        "approach",
        "system",
        "framework",
        "novel",
        "efficient",
        "robust",
        "using",
        "based",
        "large",
        "scale",
        "generative",
        "adversarial",
        "representation",
        "representations",
        "cvpr",
        "2025",  # 如果标题中可能包含这些
        "paper",
        "conference",
        "workshop",  # 如果文件内容包含这些
        "analysis",
        "study",
        "evaluation",
        "performance",
        "results",
        "data",
        "dataset",
        "datasets",
        "et",
        "al",  # 处理 'et al.' (如果存在)
        "fig",
        "figure",
        "table",  # 如果文本中有这些词
        # --- 在这里添加更多你想要排除的词 ---
        "via",
        "towards",
        "end",
        "one",
        "two",
        "three",
        "four",
        "five",
        "first",
        "second",
        "aware",
        "model",
        "understanding",
    ]
)

# 4. 词云图设置
wordcloud_width = 1600
wordcloud_height = 800
background_color = "white"  # 'black' 也是常用选项
max_words_in_cloud = 200  # 显示的最大词数
colormap = "viridis"  # 颜色方案, 其他可选: 'plasma', 'inferno', 'magma', 'cividis', 'coolwarm', etc.
include_collocations = True  # 是否包含双词搭配 (如 "object detection")

# --- 读取和处理文本 ---
try:
    with open(txt_file_path, "r", encoding="utf-8") as f:
        # 读取所有行，去除每行末尾的换行符
        titles = [line.strip() for line in f if line.strip()]  # 确保不处理空行

    # 将所有标题合并成一个长字符串，用空格分隔
    full_text = " ".join(titles)

    # (可选) 进一步清理文本：转换为小写，移除标点符号和数字
    full_text = full_text.lower()  # 转为小写
    # 移除标点符号 (保留字母、数字、空格) - 可以根据需要调整正则表达式
    # full_text = re.sub(r'[^\w\s]', '', full_text)
    # 更精细地只移除标点，保留单词间的空格
    full_text = re.sub(r"[^\w\s-]", " ", full_text)  # 移除标点，但保留连字符-
    full_text = re.sub(r"\s+", " ", full_text).strip()  # 合并多个空格为一个
    # (可选) 移除纯数字单词
    full_text = " ".join(word for word in full_text.split() if not word.isdigit())


except FileNotFoundError:
    print(f"错误：找不到文件 '{txt_file_path}'。请确保文件路径正确。")
    exit()
except Exception as e:
    print(f"读取或处理文件时出错: {e}")
    exit()

if not full_text:
    print("错误：文件中没有找到有效的标题内容。")
    exit()

# --- 生成词云 ---
print("正在生成词云...")
wordcloud = WordCloud(
    width=wordcloud_width,
    height=wordcloud_height,
    background_color=background_color,
    stopwords=custom_stopwords,
    max_words=max_words_in_cloud,
    colormap=colormap,
    collocations=include_collocations,  # 处理词组
    # contour_width=1,             # (可选) 轮廓线宽度
    # contour_color='steelblue',   # (可选) 轮廓线颜色
    random_state=42,  # (可选) 设置随机状态以保证结果可复现
).generate(full_text)

# --- 显示词云图 ---
print("正在显示词云图...")
plt.figure(figsize=(12, 6), facecolor=None)  # 设置显示窗口大小
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")  # 关闭坐标轴
plt.tight_layout(pad=0)  # 调整布局，减少白边

# --- (可选) 保存词云图到文件 ---
try:
    plt.savefig(output_image_file, dpi=300)  # dpi设置图片分辨率
    print(f"词云图已保存到: {output_image_file}")
except Exception as e:
    print(f"保存图片时出错: {e}")

# --- 显示图像 ---
plt.show()

print("完成!")
